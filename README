OE Signatures
-------------

This bitbake layer (OpenEmbedded Overlay) exists to test some code which I've
thrown together.  This code changes the way variables are expanded, to allow
more information to be retained easily about what it references.  It also adds
tracking of what shell functions are called by other shell functions, and what
variables are used from the metadata by python code.

There are multiple purposes of this, but the most immediate is to implement
intelligent signature/hash generation of the metadata (or chunks of the
metadata).  This is necessary in order to provide sane binary caching support,
and in the future, will allow bitbake to move away from the "stamp" concept
entirely, instead relying on tracking of the input and output of tasks, and
the pieces of the metadata they use.

Next, this should allow us, in the long term, to allow one to edit a
configuration file without reparsing the world.  Of course, Holger's ast work
is a step in the right direction for that also, but this would allow us to
bypass re-execution of the ast statements as well, simply letting 'dirty'
state information flow through the variable references.

TODO:
  - Add checking for recursion
  - Clean up the exception handling and bb.msg output
  - Create a Signature class to wrap up the various methods used to
    construct it, and to make it easier to access the hash digest, the
    base64 encoded string, and the actual data used to produce the hash,
    which is useful for debugging.

  - Cleanup
    - In the overridden references methods, use a uniq() utility function or a
      set to drop duplicates between the superclass references and the extra
      references gathered by the class.
    - Sanitize the property names amongst the Value implementations
    - Should the 'references' method become a property?
    - Rename 'references', as it is specifically references to variables in
      the metadata.  This isn't the only type of reference we have anymore, as
      we'll also be tracking calls to the methods in the methodpool.

  - Performance
    - Add memoization of __str__, ideally indexed by the bits that feed into
      the resulting string (i.e. self.components).

  - PythonValue:
    - Move the direct function call list from the visitor into the main object
      after parsing, so the caller doesn't need to poke into the visitor
      directly.
    - Think about checking imports to exclude more direct func calls
    - Capture FunctionDef's to exclude them from the direct func calls list
      - NOTE: This will be inaccurate, since it won't be accounting for
              contexts initially.

